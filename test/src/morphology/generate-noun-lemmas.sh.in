#!/bin/bash
# @configure_input@

# Automake interprets the exit status as follows:
# - an exit status of 0 will denote a success
# - an exit status of 77 a skipped test
# - an exit status of 99 a hard error
# - any other exit status will denote a failure.

# To run this test script only, do:
#
# make check TESTS=generate-noun-lemmas.sh

# This test script will test that all noun lemmas do generate as themselves.
# Extend as needed, and copy to new files to adapt to other parts of speech.
# The changes usually needed are:
#
# 1. change the reference to the source file (line 23)
# 2. extend the extract lemmas egrep expression (lines 53 ff)
# 3. adapt the tag addition and lemma generation instructions (lines 79 ff)

###### Variables: #######
POS=nouns
### in ###
source_file=${srcdir}/../../../src/fst/morphology/stems/${POS}.lexc
generator_file=./../../../src/generator-gt-norm
analyser_file=./../../../src/analyser-gt-norm

### out ###
# Temporary files:
lemmas=./filtered-${POS}.txt
# Result files, will get filename suffix programmatically further down:
generated_lemmas=./generated-${POS}
failed_lemmas=./fail-${POS}-lemmas
result_file=missing_${POS}_lemmas
gen_result_file=generated_missing_${POS}_lemmas
ana_result_file=analysed_missing_${POS}_lemmas

# SKIP if source file does not exist (works with both single and
# multiple files):
if [ ! `ls -1 $source_file 2>/dev/null | wc -l ` -gt 0 ]; then
    echo
    echo "*** Warning: Source file(s) $source_file not found."
    echo
    exit 77
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if test -z "$fsttype" ; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

##### Extract lemmas - add additional egrep pattern as parameters: #####
##### --include "(pattern1|pattern2|...)"                          #####
##### --exclude "(pattern1|pattern2|...)"                          #####
@GTCORE@/scripts/extract-lemmas.sh \
    $source_file > $lemmas

###### Start testing: #######
transducer_found=0
Fail=0

# The script tests both Xerox and Hfst transducers if available:
for f in $fsttype; do
    if [ $f == "xfst" ]; then
        lookup_tool="@LOOKUP@ -flags mbTT"
        suffix="xfst"
        # Does lookup support -q / quiet mode?
        lookup_quiet=$($lookup_tool -q 2>&1 | grep USAGES)
        if ! [[ $lookup_quiet == *"USAGES"* ]] ; then
            # it does support quiet mode, add the -q flag:
            lookup_tool="@LOOKUP@ -q -flags mbTT"
        fi
    elif [ $f == "hfst" ]; then
        lookup_tool="@HFST_OPTIMIZED_LOOKUP@ -q"
        suffix="hfstol"
    else
        Fail=1
        printf "ERROR: Unknown fst type! "
        echo "$f - FAIL"
        continue
    fi
    if [ -f "$generator_file.$suffix" ]; then
        let "transducer_found += 1"

###### Test non-compounds: #######
		# generate Masculine Singular Nouns:
		# $lemmas (subsequently $failed_lemmas.$f.txt) = lemmas that haven't passed yet
		# $generated_lemmas.$f.tmp.txt = output of generator (replaced for each tagset)
		# $generated_lemmas.$f.txt = cumulative list of lemmas that generate output
		
		# to begin with, all lemmas have failed (i.e. none have passed yet)
		cat $lemmas > $failed_lemmas.$f.txt
		
		# loop over tagsets and generate lemmas
		for gender in +Msc +Fem +MFN ; do
		    for number in +Sg +Pl ; do
			for grammcase in +Nom ; do
			    sed 's/$/+N'$gender$number$grammcase'/' $failed_lemmas.$f.txt \
				| $lookup_tool $generator_file.$suffix \
				| cut -f2 > $generated_lemmas.$f.tmp.txt
			    fgrep -v "+N+" $generated_lemmas.$f.tmp.txt | grep -v "^$" \
				| sort -u >> $generated_lemmas.$f.txt
			    fgrep    "+N+" $generated_lemmas.$f.tmp.txt | cut -d'+' -f1 \
				| sort -u  > $failed_lemmas.$f.txt
			done
		    done
		done
		sed 's/$/+N+MFN+Pl+Gen/' $failed_lemmas.$f.txt \
			| $lookup_tool $generator_file.$suffix \
			| cut -f2 > $generated_lemmas.$f.tmp.txt
		fgrep -v "+N+" $generated_lemmas.$f.tmp.txt | grep -v "^$" \
			| sort -u >> $generated_lemmas.$f.txt
		fgrep    "+N+" $generated_lemmas.$f.tmp.txt | cut -d'+' -f1 \
			| sort -u  > $failed_lemmas.$f.txt

###### Collect results, and generate debug info if FAIL: #######
        # Sort and compare original input with resulting output - the diff is
        # used to generate lemmas which are opened in SEE:
        sort -u -o $generated_lemmas.$f.txt $generated_lemmas.$f.txt 
		sed 's/[¹²³⁴⁵⁶⁷⁸⁹⁰⁻]*$//' $lemmas | uniq | sort -u > ./stripped_nouns.txt
        comm -23 ./stripped_nouns.txt $generated_lemmas.$f.txt | sort > $result_file.$f.txt

        # Open the diff file in SubEthaEdit (if there is a diff):
        if [ -s $result_file.$f.txt ]; then
#           grep -v '^$' $result_file.$f.txt \
#             | sed 's/$/+N+Sg+Nom/' \
#             | $lookup_tool $generator_file.$suffix \
#             > $gen_result_file.$f.txt
            # If we have an analyser, analyse the missing lemmas as well:
            if test -e $analyser_file.$suffix ; then
                grep -v '^$' $result_file.$f.txt \
                  | $lookup_tool $analyser_file.$suffix \
                  > $ana_result_file.$f.txt
            fi
            # Only open the failed lemmas in see if @SEE@ is defined:
            if [ "$EXTEDITOR" ]; then
                $EXTEDITOR $result_file.$f.txt
                $EXTEDITOR $failed_lemmas.$f.txt
                $EXTEDITOR $ana_result_file.$f.txt
            else
                echo "There were problem lemmas. Details in:"
                echo "* $result_file.$f.txt    "
                echo "* $failed_lemmas.$f.txt"
                echo "* $ana_result_file.$f.txt"
            fi
            Fail=1
            echo "$f - FAIL"
            continue
        fi
        echo "$f - PASS"
    fi
done

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
    exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo ERROR: No transducer found
    exit 77
fi

# When done, remove the generated data file:
rm -f $lemmas
rm -r ./strippednouns.txt
